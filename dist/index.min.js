/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _Util = __webpack_require__(1);

	var _Util2 = _interopRequireDefault(_Util);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	(function (window, document, util) {
	  var root = window,
	      doc = document;

	  var DEBUG_CONTAINER_ID = 'console-list';

	  var logs = [];

	  var loaded = false;
	  var consoles = ['log', 'warn', 'info', 'error'];
	  var out = {};

	  var _iteratorNormalCompletion = true;
	  var _didIteratorError = false;
	  var _iteratorError = undefined;

	  try {
	    var _loop = function _loop() {
	      var value = _step.value;


	      console['_' + value] = console[value];

	      out[value] = function () {
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	          args[_key] = arguments[_key];
	        }

	        if (loaded) {
	          var item = '<li class="console-list-item ' + value + ' ' + (value === 'error' ? 'close' : '') + '">' + util.output(args) + '</li>';
	          doc.getElementById(DEBUG_CONTAINER_ID).innerHTML += item;
	        } else {
	          logs.push({
	            type: value,
	            msg: args.length === 1 ? args[0] : args,
	            stack: ''
	          });
	        }
	      };

	      console[value] = function () {
	        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	          args[_key2] = arguments[_key2];
	        }

	        console['_' + value].apply(console, args);
	        out[value].apply(root, args);
	      };
	    };

	    for (var _iterator = consoles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	      _loop();
	    }
	  } catch (err) {
	    _didIteratorError = true;
	    _iteratorError = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion && _iterator.return) {
	        _iterator.return();
	      }
	    } finally {
	      if (_didIteratorError) {
	        throw _iteratorError;
	      }
	    }
	  }

	  util.addEventListener(root, 'load', function () {

	    util.addEventListener(doc.getElementById(DEBUG_CONTAINER_ID), 'click', function (event) {
	      var e = event || window.event;
	      var target = e.target || e.srcElement;

	      var className = target.className;

	      if (/close/.test(target.className)) {
	        target.className = className.replace(/close/, 'open');
	      } else if (/open/.test(target.className)) {
	        target.className = className.replace(/open/, 'close');
	      }
	    }, false);

	    loaded = true;

	    var log = null;
	    while (log = logs.shift()) {
	      var _log = log;
	      var type = _log.type;
	      var msg = _log.msg;
	      var stack = _log.stack;

	      out[type](msg + stack);
	    }
	  });

	  util.addEventListener(root, 'error', function (event) {
	    var message = event.message;
	    var error = event.error;
	    var stack = error.stack;


	    var stackPath = stack.split(/\n/);
	    var errorStack = '';
	    stackPath.forEach(function (path, idx) {
	      if (idx > 0) {
	        errorStack += '<div class="stack" style="padding-left: 15px">' + path + '</div>';
	      } else {
	        errorStack += '<div class="stack">' + path + '</div>';
	      }
	    });

	    if (loaded) {
	      out.error(typeof message === 'undefined' ? 'undefined' : _typeof(message));
	    } else {
	      logs.push({
	        type: 'error',
	        msg: message,
	        stack: errorStack
	      });
	    }
	  });
	})(window, document, _Util2.default);

/***/ },
/* 1 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var author = 'Rlilyyy';

	var types = ['Object', 'Array', 'RegExp', 'Function', 'Number', 'Boolean', 'Symbol', 'String'];

	var Util = function () {
	  function Util() {
	    _classCallCheck(this, Util);
	  }

	  _createClass(Util, [{
	    key: 'toString',
	    value: function toString() {
	      return 'Hello, there is ' + author + ', looooooool= =';
	    }

	    /**
	     * 兼容性事件添加，attachEvent 无法接收 event 参数，并且 this 被绑定在 window 上，所以需要指定
	     * @param  {Object} target     添加事件目标节点
	     * @param  {String} event      添加事件名称
	     * @param  {Function} func     添加事件回调函数
	     * @param  {Boolean} flag=false 事件是否在捕获阶段获取，默认为 false，仅在支持原生 addEventListener 的浏览器下有效
	     * @return {void}
	     */

	  }, {
	    key: 'addEventListener',
	    value: function addEventListener(target, event, func) {
	      var flag = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];

	      if (target.addEventListener) {
	        target.addEventListener(event, func, flag);
	      } else if (target.attachEvent) {
	        target.attachEvent('on' + event, function () {
	          func.call(target, window.event);
	        });
	      } else {
	        if (!!target['on' + event]) {
	          (function () {
	            var oldEvent = target['on' + event];

	            target['on' + event] = function (event) {
	              oldEvent.call(this, event);
	              func.call(this, event);
	            };
	          })();
	        } else {
	          target['on' + event] = func;
	        }
	      }
	    }
	  }, {
	    key: 'output',
	    value: function output(args) {
	      var _this = this;

	      var outputs = '';
	      args.forEach(function (arg) {

	        if (_this.isObject(arg) || _this.isArray(arg)) {
	          outputs += JSON.stringify(arg);
	        } else if (_this.isRegExp(arg) || _this.isFunction(arg) || _this.isSymbol(arg)) {
	          outputs += arg.toString();
	        } else {
	          outputs += arg;
	        }
	      });
	      return outputs;
	    }
	  }]);

	  return Util;
	}();

	;

	types.forEach(function (type) {
	  Util.prototype['is' + type] = function (type) {
	    return function (obj) {
	      return Object.prototype.toString.call(obj) === '[object ' + type + ']';
	    };
	  }(type);
	});

	var util = new Util();
	exports.default = util;

/***/ }
/******/ ]);